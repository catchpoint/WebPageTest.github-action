#!/usr/bin/env node

/**
 * Copyright (c) 2013, Twitter Inc.
 * Copyright (c) 2020, Google Inc.
 * Copyright (c) 2020, Marcel Duran and other contributors
 * Released under the MIT License
 */

var program     = require('commander'),
    fs          = require('fs'),
    WebPageTest = require('../lib/webpagetest'),
    mapping     = require('../lib/mapping');

var command, file, ret,
    options = {},
    args = [],
    results = [],
    defaultServer = process.env.WEBPAGETEST_SERVER ||
      WebPageTest.defaultServer;

// replace default values on descriptons
mapping.commands.listen.info =
  mapping.commands.listen.info.replace('%s', WebPageTest.defaultListenPort);

var output = function(data, exitStatus, preExit) {
  process.stdout.write(data);
  if (typeof preExit === 'function') {
    preExit();
  }
  process.exit(exitStatus || 0);
};

var formatData = function(err, data, info) {
  var dataStr,
      encoding = 'utf8';

  if (err) {
    data = {error: err};
  } else if (info) {
    encoding = info.encoding;
    if (encoding === 'binary') {
      data = new Buffer.from(data, 'binary');
      type = info.type;
    } else {
      data = {type: info.type, data: data};
    }
  }

  if (!(data instanceof Buffer)) {
    try {
      dataStr = JSON.stringify(data, null, 2);
    } catch (ex) {
      dataStr = JSON.stringify({
        data: data.toString(),
        error: ex.message
      }, null, 2);
    }
  }

  if (file) {
    fs.writeFile(file, (dataStr || data), encoding, function writeFile(err) {
      if (err) {
        output(err.message, 1);
      }
    });
  } else {
    output((dataStr || data), err ? 1 : 0);
  }

  return data;
}

function addOptions(prg, options, nokeyList) {
  (options || []).forEach(function eachOption(option) {
    var nokey = nokeyList && nokeyList.indexOf(option) > -1;

    Object.keys(option).forEach(function eachOpt(name) {
      var opt = option[name],
          openParam = '<',
          closeParam = '>';

      // bail shorthands
      if (name == opt.key) {
        return;
      }

      if (opt.optional) {
        openParam = '[';
        closeParam = ']';
      }

      prg.option([
          !nokey && opt.key ? ('-' + opt.key + ', ') : '    ',
          '--' + name,
          opt.param ? (' ' + openParam + opt.param + closeParam) : ''
        ].join(''),
        name === 'server' ? opt.info.replace('%s', defaultServer) : opt.info
      );
    });
  });
}

// global options
addOptions(
  program.version(WebPageTest.version),
  [mapping.options.common, {
    'out': {
      key: 'o',
      param: 'file',
      info: 'place the output into <file>. Defaults to stdout'
    }
  }]
);

Object.keys(mapping.commands).forEach(function eachCommand(name) {
  var param,
      openParam = '<',
      closeParam = '>',
      cmd = mapping.commands[name];

  function defaultAction(param, opts) {
    command = cmd.name;
    if (cmd.param) {
      args.push(param);
    }
    if (cmd.options) {
      options = mapping.setOptions(name, opts || param);
    }
  }

  var customActions = {
    'test': function(what, opts) {
      // check for script file
      if (fs.existsSync(what) && fs.statSync(what).isFile()) {
        what = fs.readFileSync(what, 'utf8');
      }

      defaultAction(decodeURIComponent(what), opts);
      if (options.specs && !program.batch) {
        options.exitOnResults = true;
      }
    },
    'results': function(id, opts) {
      defaultAction(id, opts);
      if (opts.specs && !program.dryrun && !program.batch) {
        formatData = null;
      }
    },
    'listen': function(port, opts) {
      defaultAction(port, opts);
      formatData = function customFormat(err, data) {
        if (err) {
          output(JSON.stringify({error: err}, null, 2), 1);
        } else {
          process.stderr.write('server listening on ' + data.url);
        }
      };
    }
  };

  // command with (optional) parameter
  if (cmd.param) {
    if (cmd.optional) {
      openParam = '[';
      closeParam = ']';
    }
    param = [name, ' ', openParam, cmd.param, closeParam].join('');
  } else {
    param = name;
  }

  addOptions(
    program
      .command(param)
      .description(cmd.info)
      .action(customActions[name] || defaultAction),
    cmd.options,
    cmd.nokey
  );
});

function parseBatch(filename) {
  var lines;

  try {
    lines = (fs.readFileSync(filename, 'utf8') || '')
      .split('\n')
      .filter(function(line) {return line;})
      .map(function(line) {return line.split(' ');})
      .map(function(line) {
        var tmp = [];
        return line.reduce(function(prev, curr, index) {
          if (/^[^\\]?['"]/.test(curr)) {
            tmp.push(curr.slice(1));
          } else if (tmp.length) {
            if (/[^\\]['"]$/.test(curr)) {
              tmp.push(curr.slice(0, curr.length - 1));
              prev.push(tmp.join(' '));
              tmp = [];
            } else {
              tmp.push(curr);
            }
          } else {
            prev.push(curr);
          }
          return prev;
        }, ['', '']);
      });
  } catch (err) {
    output(err.message + '\n', 1);
  }

  return lines;
}
//return console.log(parseBatch('batch.txt'));

function batch(file) {
  var accErr = 0,
      count = 0,
      originalFormatData = formatData,
      originalOutput = output;

  function checkDone() {
    count--;
    if (!count) {
      originalOutput(
        results.length ? JSON.stringify(results, null, 2) : '',
        accErr
      );
    }
  };

  function checkError(err) {
    accErr += err ? 1 : 0;
    checkDone();
  }

  function aggregate(index, err, data, info) {
    results[index] = originalFormatData(err, data, info);
    checkError(err);
  }

  program.batch = true;
  var cmds = parseBatch(file);
  if (!cmds) {
    return;
  }
  count = cmds.length;
  output = function(){};

  cmds.forEach(function(cmd, index) {
    program.parse(cmd);
    formatData = options.specs ? checkError : aggregate.bind(null, index);
    execCommand();
    cleanupProgram();
  });
}

function cleanupProgram() {
  command = null;
  options = {};
  args = [];
  program.commands.forEach(function(c) {
    c.options.forEach(function(o) {
      delete c[o.long.slice(2)];
    });
  });
  delete program.server;
  delete program.dryrun;
  delete program.out;
  delete program.http_method;
}

function execCommand() {
  var wpt = new WebPageTest(program.server || defaultServer, options.key);

  // options
  if (options) {
    options.dryRun = program.dryrun;
    options.http_method = program.http_method;
    args.push(options);
  }

  // callback
  if (formatData) {
    args.push(formatData);
  }

  file = program.out;

  wpt[command].apply(wpt, args);
}

program
  .command('batch <file>')
  .description(
    'run commands in batch, i.e. one command per line from <file> in parallel')
  .action(batch);

program.parse(process.argv);

if (command) {
  execCommand();
} else if (!program.batch) {
  output(program.helpInformation(), 1, function defaultHelp() {
    program.emit('--help');
  });
}
